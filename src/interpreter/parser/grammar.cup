/**
 * Metafox - A DYNAMIC, INTERPRETED, META-PROGRAMMING LANGUAGE, RUN AND
 * SUPPORTED BY ITS OWN INDEPENDENT INTERPRETER.
 *
 * UNIVERSITY OF CRETE (UOC)
 *
 * COMPUTER SCIENCE DEPARTMENT (UOC)
 *
 * https://www.csd.uoc.gr/
 *
 * CS-540 ADVANCED TOPICS IN PROGRAMMING LANGUAGES DEVELOPMENT
 *
 * LICENCE: This file is part of Metafox. Metafox is free: you can redistribute
 * it and/or modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation (version 3 of the License).
 *
 * Metafox is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Metafox. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016
 *
 */

import ast.*;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

/**
 * PARSER
 *
 * @author Drakonakis Kostas  < kostasDrk  at csd.uoc.gr >
 * @author Kokolaki Anna      < kokolaki   at csd.uoc.gr >
 * @author Nikitakis Giorgos  < nikitak    at csd.uoc.gr >
 *
 * @version 1.0.0
 */
parser code
{:
    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info)
    {
        String error = "";
        if (! (info instanceof Symbol))
            info = cur_token;
        if( info instanceof Symbol ) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = "[SyntaxError] @line:"+line  + ", @column:" + column+".";
        }
        //error = error + ": error: " + message;
        System.err.println(error);
        System.err.flush();
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception
    {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        //report_error(message, info);

        /* throw an exception */
        throw new Exception("[Metafox-Parser]: Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }
:};


terminal WHILE, FOR, IF, ELSE, RETURN, BREAK, CONTINUE, FUNCTION, TRUE, FALSE, NULL, LOCAL;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, SEMICOLON, COLON, LEFT_BRACKET, RIGHT_BRACKET, OPEN_BLOCK, CLOSE_BLOCK, DOT, DOUBLE_DOT, COMMA;
terminal DOUBLE_COLON;
terminal ASSIGN;
terminal MUL, DIV, MOD;
terminal PLUS, MINUS, UMINUS, PLUS_PLUS, MINUS_MINUS;
terminal GREATER, LESS, NOT_EQUAL, LESS_OR_EQUAL, GREATER_OR_EQUAL, CMP_EQUAL;
terminal LOGIC_AND, LOGIC_OR, NOT;
terminal QUASI_ESC, QUASI_EXEC, QUASI_OPEN, QUASI_CLOSE, QUASI_RUN, QUASI_EVAL, QUASI_TO_TEXT;

terminal java.lang.String ID;
terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Double  REAL_LITERAL;
terminal java.lang.String  STRING_LITERAL;

non terminal Program program;
non terminal ArrayList<Statement> stmtlist;
non terminal Statement stmt;
non terminal Expression expr;
non terminal ArrayList<Expression> elist;
non terminal IfStatement ifstmt;
non terminal Statement elsestmt;
non terminal WhileStatement whilestmt;
non terminal ForStatement forstmt;
non terminal ReturnStatement returnstmt;
non terminal ReturnStatement returnStmt;
non terminal Block block;
non terminal FunctionDef funcdef;
non terminal String functionName;
non terminal AssignmentExpression assignexpr;
non terminal TermExpression term;
non terminal Lvalue lvalue;
non terminal Primary primary;
non terminal Call call;
non terminal ArrayDef arraydef;
non terminal Constant const;
non terminal Member member;
non terminal CallSuffix callsuffix;
non terminal NormCall normcall;
non terminal MethodCall methodcall;
non terminal ObjectDefinition objectdef;
non terminal IndexedElement indexedelem;
non terminal ArrayList<IndexedElement> indexedelemlist;
non terminal ArrayList<IdentifierExpression> idlist;

precedence right ASSIGN;
precedence left LOGIC_OR;
precedence left LOGIC_AND;
precedence nonassoc  CMP_EQUAL, NOT_EQUAL;
precedence nonassoc  GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL;
precedence left PLUS, MINUS;
precedence left MUL, DIV, MOD;
precedence right NOT,PLUS_PLUS, MINUS_MINUS, UMINUS, QUASI_EXEC, QUASI_ESC, QUASI_RUN;
precedence left  DOT, DOUBLE_DOT;
precedence left LEFT_BRACKET, RIGHT_BRACKET;
precedence left  LEFT_PARENTHESIS, RIGHT_PARENTHESIS;
precedence nonassoc IF;
precedence nonassoc ELSE;

start with program;


program ::=	 /*Empty program*/
			 {:
			 	RESULT = new Program();
			 	RESULT.setLine(0);
			 	RESULT.setColumn(0);
			 :}
			| stmtlist:stlist
			 {:
			 	RESULT = new Program(stlist);
			 	RESULT.setLine(stlistleft);
			 	RESULT.setColumn(stlistright);
			 :}
			;

stmtlist  ::= stmt:st
			  {:
			  	RESULT = new ArrayList<Statement>();
			  	RESULT.add(st);
			  :}
			| stmtlist:stlist stmt:st
			  {:
			  	stlist.add(st);
			  	RESULT = stlist;
			  :}
			;


stmt ::=	 expr:ex SEMICOLON
			{:
				RESULT = new ExpressionStatement(ex);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			|ifstmt:ifst
			{:
				RESULT = ifst;
			:}
			|whilestmt:whilest
			{:
				RESULT = whilest;
			:}
			|forstmt:forst
			{:
				RESULT = forst;
			:}
			|returnstmt:retst
			{:
				RESULT = retst;
			:}
			|BREAK:br SEMICOLON
			{:
				RESULT = new BreakStatement();
				RESULT.setLine(brleft);
				RESULT.setColumn(brright);
			:}
			|CONTINUE:cont SEMICOLON
			{:
				RESULT = new ContinueStatement();
				RESULT.setLine(contleft);
				RESULT.setColumn(contright);
			:}
			|block:bl
			{:
				RESULT = bl;
			:}
			|funcdef:fdef
			{:
				RESULT = fdef;
			:}
			|SEMICOLON			
			{:
				RESULT = new ExpressionStatement(null);
			:}
			;

expr ::=	assignexpr:assignex
			{:
				RESULT = assignex;
			:}
			|expr:ex1 PLUS expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.PLUS, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 MINUS expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.MINUS, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 MUL expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.MUL, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 DIV expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.DIV, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 MOD expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.MOD, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 LOGIC_AND expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.LOGIC_AND, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 LOGIC_OR expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.LOGIC_OR, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 CMP_EQUAL expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.CMP_EQUAL, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 NOT_EQUAL expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.NOT_EQUAL, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 GREATER_OR_EQUAL expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.GREATER_OR_EQUAL, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 GREATER expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.GREATER, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 LESS_OR_EQUAL expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.LESS_OR_EQUAL, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|expr:ex1 LESS expr:ex2
			{:
				RESULT = new BinaryExpression(Operator.LESS, ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
			|term:trm
			{:
				RESULT = trm;
			:}
			;


term ::=	 LEFT_PARENTHESIS expr:ex RIGHT_PARENTHESIS
			{:
				//RESULT = ex;
				RESULT = new ParenthesisExpression(ex);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			|MINUS expr:ex
			{:
				RESULT = new UnaryExpression(Operator.MINUS, ex, null, false);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			 %prec UMINUS
			|NOT expr:ex
			{:
				RESULT = new UnaryExpression(Operator.LOGIC_NOT, ex, null, false);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			|PLUS_PLUS lvalue:lval
			{:
				RESULT = new UnaryExpression(Operator.PLUS_PLUS, null, lval, false);
				RESULT.setLine(lvalleft);
				RESULT.setColumn(lvalright);
			:}
			|lvalue:lval PLUS_PLUS
			{:
				RESULT = new UnaryExpression(Operator.PLUS_PLUS, null, lval, true);
				RESULT.setLine(lvalleft);
				RESULT.setColumn(lvalright);
			:}
			|MINUS_MINUS lvalue:lval
			{:
				RESULT = new UnaryExpression(Operator.MINUS_MINUS, null, lval, false);
				RESULT.setLine(lvalleft);
				RESULT.setColumn(lvalright);
			:}
			|lvalue:lval MINUS_MINUS
			{:
				RESULT = new UnaryExpression(Operator.MINUS_MINUS, null, lval, true);
				RESULT.setLine(lvalleft);
				RESULT.setColumn(lvalright);
			:}
			|QUASI_OPEN expr:ex QUASI_CLOSE
			{:
				RESULT = new MetaSyntax(ex);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			|QUASI_OPEN stmtlist:stlist QUASI_CLOSE
			{:
				RESULT = new MetaSyntax(stlist);
				RESULT.setLine(stlistleft);
				RESULT.setColumn(stlistright);
			:}
			|QUASI_ESC expr:ex
			{:
				RESULT = new MetaEscape(ex);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			|QUASI_EXEC expr:ex
			{:
				RESULT = new MetaExecute(ex);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			|QUASI_RUN expr:ex
			{:
				RESULT = new MetaRun(ex);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			|QUASI_EVAL LEFT_PARENTHESIS expr:ex RIGHT_PARENTHESIS
			{:
				RESULT = new MetaEval(ex);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			|QUASI_TO_TEXT expr:ex
			{:
				RESULT = new MetaToText(ex);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			|primary:prim
			{:
				RESULT = prim;
			:};

assignexpr ::= 	lvalue:lval ASSIGN expr:ex
			{:
				RESULT = new AssignmentExpression(lval, ex);
				RESULT.setLine(lvalleft);
				RESULT.setColumn(lvalright);
			:}
			;


primary ::= lvalue:lval{:
				RESULT = lval;
			:}
			|call:cl
			{:
				RESULT = cl;
			:}
			|objectdef:objdef
			{:
				RESULT = objdef;
			:}
			|arraydef:arrdef
			{:
				RESULT = arrdef;
			:}
			|LEFT_PARENTHESIS funcdef:fdef RIGHT_PARENTHESIS
			{:
				RESULT = new FunctionDefExpression(fdef);
				RESULT.setLine(fdefleft);
				RESULT.setColumn(fdefright);
			:}
			|const:con
			{:
				RESULT = con;
			:}
			;

lvalue ::=   ID:id
			{:
				RESULT = new IdentifierExpression(id);
				RESULT.setLine(idleft);
				RESULT.setColumn(idright);
			:}
			|LOCAL ID:id
			{:
				RESULT = new IdentifierExpressionLocal(id);
				RESULT.setLine(idleft);
				RESULT.setColumn(idright);
			:}
			|DOUBLE_COLON ID:id
			{:
				RESULT = new IdentifierExpressionGlobal(id);
				RESULT.setLine(idleft);
				RESULT.setColumn(idright);
			:}
			|member:memb
			{:
				RESULT = memb;
			:}
			;


member ::= lvalue:lval DOT ID:id
			{:
                                IdentifierExpression tmpID = new IdentifierExpression(id);
				RESULT = new Member(lval, tmpID, null, null);
				RESULT.setLine(lvalleft);
				RESULT.setColumn(lvalright);
			:}
			|lvalue:lval LEFT_BRACKET expr:ex RIGHT_BRACKET
			{:
				RESULT = new Member(lval, null, null, ex);
				RESULT.setLine(lvalleft);
				RESULT.setColumn(lvalright);				
			:}
			|call:cl DOT ID:id
			{:
                                IdentifierExpression tmpID = new IdentifierExpression(id);
				RESULT = new Member(null, tmpID, cl, null);
				RESULT.setLine(clleft);
				RESULT.setColumn(clright);
			:}
			|call:cl LEFT_BRACKET expr:ex RIGHT_BRACKET
			{:
				RESULT = new Member(null, null, cl, ex);
				RESULT.setLine(clleft);
				RESULT.setColumn(clright);
			:}
			;



call   ::= call:cl normcall:normcl
			{:
                RESULT = new ExtendedCall(cl, normcl);
				RESULT.setLine(normclleft);
				RESULT.setColumn(normclright);
			:}
			|lvalue:lval callsuffix:clsuffix
			{:
				RESULT = new LvalueCall(lval, clsuffix);
				RESULT.setLine(lvalleft);
				RESULT.setColumn(lvalright);
			:}
			|LEFT_PARENTHESIS funcdef:fdef RIGHT_PARENTHESIS normcall:normcl
			{:
                RESULT = new AnonymousFunctionCall(fdef, normcl);
				RESULT.setLine(fdefleft);
				RESULT.setColumn(fdefright);
			:}
			;



callsuffix ::= normcall:normcl
			{:
				RESULT = normcl;
			:}
			|methodcall:methcl
			{:
				RESULT = methcl;
			:}
			;



normcall ::= LEFT_PARENTHESIS elist:el RIGHT_PARENTHESIS
			{:
				if(el == null)
					RESULT = new NormCall();
				else
					RESULT = new NormCall(el);
				RESULT.setLine(elleft);
				RESULT.setColumn(elright);
			:}
			;


methodcall ::=  DOUBLE_DOT ID:id normcall:normcl
			{:
                                RESULT = new MethodCall(id, normcl);
				RESULT.setLine(idleft);
				RESULT.setColumn(idright);
			:}
			;


elist 	   	::= 
		  	| expr:ex
		  	{:
			  	RESULT = new ArrayList<Expression>();
			  	RESULT.add(ex);
		  	:}
		  	| elist:el COMMA expr:ex
		  	{:
		  		el.add(ex);
		  		RESULT = el;
		  	:};


objectdef ::= OPEN_BLOCK indexedelemlist:indlist CLOSE_BLOCK
			{:
				if(indlist == null)
					RESULT = new ObjectDefinition();
				else
					RESULT = new ObjectDefinition(indlist);
				RESULT.setLine(indlistleft);
				RESULT.setColumn(indlistright);
			:};


indexedelem ::= expr:ex1 COLON expr:ex2
			{:
				RESULT = new IndexedElement(ex1, ex2);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:}
                        |expr:ex1 COLON funcdef:fdef
			{:
				RESULT = new IndexedElement(ex1, fdef);
				RESULT.setLine(ex1left);
				RESULT.setColumn(ex1right);
			:};

indexedelemlist ::=
			| indexedelem:ind
			{:
				RESULT = new ArrayList<IndexedElement>();
				RESULT.add(ind);
			:}
			| indexedelemlist:indel COMMA indexedelem:ind
			{:
				indel.add(ind);
				RESULT = indel;
			:};	  


arraydef::= LEFT_BRACKET elist:el RIGHT_BRACKET
			{:
				RESULT = new ArrayDef(el);
				RESULT.setLine(elleft);
				RESULT.setColumn(elright);
			:}
			;


block ::=   OPEN_BLOCK stmtlist:stlist CLOSE_BLOCK
			{:
				RESULT = new Block(stlist);
				RESULT.setLine(stlistleft);
				RESULT.setColumn(stlistright);
			:}
			;

funcdef ::= FUNCTION  functionName:funcName LEFT_PARENTHESIS idlist:idl RIGHT_PARENTHESIS block:bl
			{:
				RESULT = new FunctionDef(funcName, idl, bl);
				RESULT.setLine(funcNameleft);
				RESULT.setColumn(funcNameright);
			:}
			| FUNCTION  functionName:funcName LEFT_PARENTHESIS idlist:idl RIGHT_PARENTHESIS OPEN_BLOCK CLOSE_BLOCK
			{:
				RESULT = new FunctionDef(funcName, idl, new Block());
				RESULT.setLine(funcNameleft);
				RESULT.setColumn(funcNameright);
			:}
			;


functionName::=         {:
				RESULT = "#ANONYMOUS#_";
                        :}
			|ID:id
			{:
				RESULT = id;
			:}
			;

const ::= INTEGER_LITERAL:literal
			{:
				RESULT = new IntegerLiteral(literal);
				RESULT.setLine(literalleft);
				RESULT.setColumn(literalright);
			:}
			|REAL_LITERAL:literal
			{:
				RESULT = new DoubleLiteral(literal);
				RESULT.setLine(literalleft);
				RESULT.setColumn(literalright);
			:}
			|STRING_LITERAL:literal
			{:
				RESULT = new StringLiteral(literal);
				RESULT.setLine(literalleft);
				RESULT.setColumn(literalright);
			:}
			|NULL:literal
			{:
				RESULT = new NullLiteral();
				RESULT.setLine(literalleft);
				RESULT.setColumn(literalright);
			:}
			|TRUE:literal
			{:
				RESULT = new TrueLiteral();
				RESULT.setLine(literalleft);
				RESULT.setColumn(literalright);
			:}
			|FALSE:literal
			{:
				RESULT = new FalseLiteral();
				RESULT.setLine(literalleft);
				RESULT.setColumn(literalright);
			:}
			;

idlist	::=             {:
				RESULT = new ArrayList<IdentifierExpression>();
                        :}
			| ID:id
			{:
				RESULT = new ArrayList<IdentifierExpression>();

				IdentifierExpression tmpID = new IdentifierExpression(id);
				tmpID.setLine(idleft);
				tmpID.setColumn(idright);

				RESULT.add(tmpID);
			:}
			| idlist:idl COMMA ID:id
			{:
				IdentifierExpression tmpID = new IdentifierExpression(id);
				tmpID.setLine(idleft);
				tmpID.setColumn(idright);

				idl.add(tmpID);
				RESULT = idl;
			:};


ifstmt ::= IF LEFT_PARENTHESIS expr:ex RIGHT_PARENTHESIS stmt:st elsestmt:elsest
			{:
				RESULT = new IfStatement(ex, st, elsest);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			;


elsestmt ::= ELSE stmt:st
			{:
				RESULT = st;
			:}
			|  
			{:
				RESULT = null;
			:}
			%prec IF
			;

whilestmt ::= WHILE LEFT_PARENTHESIS expr:ex RIGHT_PARENTHESIS stmt:st
			{:
				RESULT = new WhileStatement(ex, st);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			;


forstmt ::=  FOR LEFT_PARENTHESIS elist:el1 SEMICOLON expr:ex SEMICOLON elist:el2 RIGHT_PARENTHESIS stmt:st
			{:
				RESULT = new ForStatement(el1, ex, el2, st);
				RESULT.setLine(el1left);
				RESULT.setColumn(el1right);
			:}
			;


returnstmt ::= RETURN returnStmt:retst SEMICOLON
			{:
				RESULT = retst;
				RESULT.setLine(retstleft);
				RESULT.setColumn(retstright);
			:}
			;


returnStmt  ::= 
			{:
				RESULT = new ReturnStatement();
			:}
			| expr:ex
			{:
				RESULT = new ReturnStatement(ex);
				RESULT.setLine(exleft);
				RESULT.setColumn(exright);
			:}
			;